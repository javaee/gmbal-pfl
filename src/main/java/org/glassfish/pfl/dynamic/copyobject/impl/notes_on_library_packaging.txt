#  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#  
#  Copyright (c) 1997-2010 Oracle and/or its affiliates. All rights reserved.
#  
#  The contents of this file are subject to the terms of either the GNU
#  General Public License Version 2 only ("GPL") or the Common Development
#  and Distribution License("CDDL") (collectively, the "License").  You
#  may not use this file except in compliance with the License.  You can
#  obtain a copy of the License at
#  https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
#  or packager/legal/LICENSE.txt.  See the License for the specific
#  language governing permissions and limitations under the License.
#  
#  When distributing the software, include this License Header Notice in each
#  file and include the License file at glassfish/bootstrap/legal/LICENSE.txt.
#  
#  GPL Classpath Exception:
#  Oracle designates this particular file as subject to the "Classpath"
#  exception as provided by Oracle in the GPL Version 2 section of the License
#  file that accompanied this code.
#  
#  Modifications:
#  If applicable, add the following below the License Header, with the fields
#  enclosed by brackets [] replaced by your own identifying information:
#  "Portions Copyright [year] [name of copyright owner]"
#  
#  Contributor(s):
#  If you wish your version of this file to be governed by only the CDDL or
#  only the GPL Version 2, indicate your decision by adding "[Contributor]
#  elects to include this software in this distribution under the [CDDL or GPL
#  Version 2] license."  If you don't indicate a single choice of license, a
#  recipient has the option to distribute your version of this file under
#  either the CDDL, the GPL Version 2 or to extend the choice of license to
#  its licensees as provided above.  However, if you add GPL Version 2 code
#  and therefore, elected the GPL Version 2 license, then the option applies
#  only if the new code is made subject to such option by the copyright
#  holder.

For now, we are leaving codegen in optional, so we can leave copyobject there
as well.

Split impl.copyobject.JavaStreamObjectCopierImpl into two parts:
    impl.copyobject.JavaStreamObjectCopierImpl, which does NOT do the autoconnect
    impl.copyobject.JavaStreamORBObjectCopierImpl, which subclasses 
    JavaStreamObjectCopierImpl and DOES the autoconnect.

New packaging:
    spi/copyobject		ORB
	spi.copyobject.CopierManager
	spi.copyobject.CopyobjectDefaults
    spi/orbutil/copyobject	LIB
	spi.copyobject.ObjectCopier
	spi.copyobject.ObjectCopierFactory
	spi.copyobject.ReflectiveCopyException

    impl/copyobject		ORB
	impl.copyobject.CopierManagerImpl
	impl.copyobject.JavaStreamORBObjectCopierImpl
	impl.copyobject.ORBStreamObjectCopierImpl
	impl.copyobject.ReferenceObjectCopierImpl

    impl/orbutil/copyobject	LIB
	impl.copyobject.JavaStreamObjectCopierImpl
	impl.copyobject.FallbackObjectCopierImpl


    optional spi/copyobject		ORB
	optional spi.copyobject.OptimizedCopyObjectDefaults
    optional spi/orbutil/copyobject	LIB
	new: ObjectCopierFactoryImpl (like ReflectiveObjectCopierImpl, but does not
	    do ORB-specific copying)
	
    optional impl/copyobject		ORB
	optional impl.copyobject.newreflect.ReflectObjectCopierImpl
	optional impl.copyobject.OldReflectObjectCopierImpl
    optional impl/orbutil/copyobject	LIB
	optional impl.copyobject.newreflect.BCELCopierBase		=> move to codegen
	optional impl.copyobject.newreflect.BCELCopierGenerator		=> move to codegen
	optional impl.copyobject.newreflect.CachingClassCopierFactory
	optional impl.copyobject.newreflect.ClassCopier
	optional impl.copyobject.newreflect.ClassCopierBase
	optional impl.copyobject.newreflect.ClassCopierFactory
	optional impl.copyobject.newreflect.ClassCopierFactoryArrayImpl
	optional impl.copyobject.newreflect.ClassCopierFactoryPipelineImpl
	optional impl.copyobject.newreflect.ClassCopierOrdinaryImpl
	optional impl.copyobject.newreflect.DefaultClassCopierFactories
	optional impl.copyobject.newreflect.DefaultClassCopiers
	optional impl.copyobject.newreflect.FastCache
	optional impl.copyobject.newreflect.FastCacheTest
	optional impl.copyobject.newreflect.PipelineClassCopierFactory

