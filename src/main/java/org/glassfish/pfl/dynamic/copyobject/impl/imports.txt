#  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#  
#  Copyright (c) 1997-2010 Oracle and/or its affiliates. All rights reserved.
#  
#  The contents of this file are subject to the terms of either the GNU
#  General Public License Version 2 only ("GPL") or the Common Development
#  and Distribution License("CDDL") (collectively, the "License").  You
#  may not use this file except in compliance with the License.  You can
#  obtain a copy of the License at
#  https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
#  or packager/legal/LICENSE.txt.  See the License for the specific
#  language governing permissions and limitations under the License.
#  
#  When distributing the software, include this License Header Notice in each
#  file and include the License file at glassfish/bootstrap/legal/LICENSE.txt.
#  
#  GPL Classpath Exception:
#  Oracle designates this particular file as subject to the "Classpath"
#  exception as provided by Oracle in the GPL Version 2 section of the License
#  file that accompanied this code.
#  
#  Modifications:
#  If applicable, add the following below the License Header, with the fields
#  enclosed by brackets [] replaced by your own identifying information:
#  "Portions Copyright [year] [name of copyright owner]"
#  
#  Contributor(s):
#  If you wish your version of this file to be governed by only the CDDL or
#  only the GPL Version 2, indicate your decision by adding "[Contributor]
#  elects to include this software in this distribution under the [CDDL or GPL
#  Version 2] license."  If you don't indicate a single choice of license, a
#  recipient has the option to distribute your version of this file under
#  either the CDDL, the GPL Version 2 or to extend the choice of license to
#  its licensees as provided above.  However, if you add GPL Version 2 code
#  and therefore, elected the GPL Version 2 license, then the option applies
#  only if the new code is made subject to such option by the copyright
#  holder.

GlassFish dependencies on copyobject:
    spi.copyobject.CopyobjectDefaults
    spi.copyobject.CopierManager
    spi.copyobject.ObjectCopierFactory
    spi.copyobject.OptimizedCopyObjectDefaults (from optional)
Do not move these, or change their packaging.

Classes used only in ReflectObjectCopierImpl:
    import com.sun.corba.se.impl.util.Utility ;
    import com.sun.corba.se.spi.logging.LogWrapperBase ;
    import com.sun.corba.se.spi.orb.ORB ;
    import org.omg.CORBA.portable.Delegate ;
    import org.omg.CORBA.portable.ObjectImpl ;

Needed in ClassCopierOrdinaryImpl for USE_BCEL_REFLECTIVE_COPYOBJECT.
    import com.sun.corba.se.impl.orbutil.ORBConstants ;

Needed only in BCELCopierGenerator:
    import org.apache.bcel.*;
    import org.apache.bcel.classfile.*;
    import org.apache.bcel.generic.*;

Bridge is needed internally (question: can we eliminate now
    that reflection can handle writing to non-static finals
    with suppressAccessCheck?) in ClassCopierOrdinaryImpl,
    BCELCopierBase, and BCELCopierGenerator (and will also
    be needed in codegen replacements for these classes)
    import sun.corba.Bridge ;
    import sun.corba.BridgePermission ;

Moving copyobject into ORB library:
    spi/copyobject
	CopierManager			orb
	CopyobjectDefaults		orb (depends on ORBStream)
	ObjectCopierFactory		orb

	(move following to spi.orbutil.copyobject:) 
	ObjectCopier			lib
	ReflectiveCopyException		lib
    impl/copyobject
	CopierManagerImpl		orb
	JavaStreamObjectCopierImpl	orb: change to
	    JavaStreamObjectORBCopierImpl orb (subclass overrides
		copy, does autoconnect if obj instanceof Remote,
		otherwise calls super.copy)
	ORBStreamObjectCopierImpl	orb
	ReferenceObjectCopierImpl	orb (don't need this for lib)

	(move to impl/orbutil/copyobject)
	JavaStreamObjectCopierImpl	lib (no autoconnect)
	FallbackObjectCopierImpl	lib 

    optional spi/copyobject
	OptimizedCopyObjectDefaults	orb

    optional impl/copyobject
	OldReflectObjectCopierImpl	orb (actually only need this for testing)
    optional impl/copyobject/newreflect
	Move the following to impl/orbutil/copyobject
	replace:
	    BCELCopierBase.java
	    BCELCopierGenerator.java
	with corresponding codegen classes.	lib

	CachingClassCopierFactory.java		lib
	ClassCopier.java			lib
	ClassCopierBase.java			lib
	ClassCopierFactory.java			lib
	ClassCopierFactoryArrayImpl.java	lib
	ClassCopierFactoryPipelineImpl.java	lib
	ClassCopierOrdinaryImpl.java		lib
	DefaultClassCopierFactories.java	lib
	DefaultClassCopiers.java		lib
	FastCache.java				lib
	FastCacheTest.java			lib (test only)
	PipelineClassCopierFactory.java		lib

	Move to optional impl/copyobject:
	ReflectObjectCopierImpl.java		orb

	
New order:
    spi/orbutil/copyobject		    lib
    spi/copyobject			    orb
    impl/orbutil/copyobject		    lib
    impl/copyobject			    orb
    optional spi/copyobject		    orb
    optional spi/orbutil/copyobject	    lib
	contains new class:
	public class ObjectCopierFactory {
	    public static ObjectCopier make() {
		... // like new ReflectObjectCopierImpl, without CORBA bits
	    }
	}
	
    optional impl/copyobject		    orb
    optional impl/orbutil/copyobject	    lib

