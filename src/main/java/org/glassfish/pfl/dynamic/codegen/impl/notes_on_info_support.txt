#  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#  
#  Copyright (c) 1997-2010 Oracle and/or its affiliates. All rights reserved.
#  
#  The contents of this file are subject to the terms of either the GNU
#  General Public License Version 2 only ("GPL") or the Common Development
#  and Distribution License("CDDL") (collectively, the "License").  You
#  may not use this file except in compliance with the License.  You can
#  obtain a copy of the License at
#  https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
#  or packager/legal/LICENSE.txt.  See the License for the specific
#  language governing permissions and limitations under the License.
#  
#  When distributing the software, include this License Header Notice in each
#  file and include the License file at glassfish/bootstrap/legal/LICENSE.txt.
#  
#  GPL Classpath Exception:
#  Oracle designates this particular file as subject to the "Classpath"
#  exception as provided by Oracle in the GPL Version 2 section of the License
#  file that accompanied this code.
#  
#  Modifications:
#  If applicable, add the following below the License Header, with the fields
#  enclosed by brackets [] replaced by your own identifying information:
#  "Portions Copyright [year] [name of copyright owner]"
#  
#  Contributor(s):
#  If you wish your version of this file to be governed by only the CDDL or
#  only the GPL Version 2, indicate your decision by adding "[Contributor]
#  elects to include this software in this distribution under the [CDDL or GPL
#  Version 2] license."  If you don't indicate a single choice of license, a
#  recipient has the option to distribute your version of this file under
#  either the CDDL, the GPL Version 2 or to extend the choice of license to
#  its licensees as provided above.  However, if you add GPL Version 2 code
#  and therefore, elected the GPL Version 2 license, then the option applies
#  only if the new code is made subject to such option by the copyright
#  holder.

Codegen provides reflective information about classes,
much as the ordinary Class and Method classes in Java.
We need (at least) the following cases:
    1. ClassGenerator and MethodGenerator provide info about
       classes and methods that are being generated in the 
       framework.  These must also be AST nodes.
    2. ClassInfoReflectiveImpl and MethodInfoReflectiveImpl provides
       info about Java Class and Method instances that are already 
       loaded in the VM.  They should not be AST nodes.
    3. We will also need ClassInfo and MethodInfo implementations 
       that handle the Doclet classes.  This is needed for supporting
       dynamic RMI-IIOP.  They should not be AST nodes.
    4. ClassInfo and MethodInfo may need some way to access the underlying
       Java Class and Method instances, when they exist.  This may also 
       be needed for dynamic RMI-IIOP

Here is the inheritance structure of the implementation:

ClassInfo (interface)
    ClassInfoBase (abstract class)
	ClassInfoReflectiveImpl
	    - Just uses Java reflection on a Class instance.
	ClassInfoDocletImpl
	    - Just uses the Doclet API to implement ClassInfo
	ClassGenerator
	    - also implements Node
	    - uses delegation to an instance of NodeBase to implement
	      the Node API.

MethodInfo (interface)
    MethodInfoBase (abstract class)
	MethodInfoReflectiveImpl
	    - Just uses Java reflection on a Method instance.
	    - really just initialization: the API is implemented in the
	      super class.
	MethodInfoDocletImpl
	    - Just uses the Doclet API to implement MethodInfo
	MethodGenerator
	    - also implements Node
	    - uses delegation to an instance of NodeBase to implement
	      the Node API.
